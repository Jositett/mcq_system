"""test autogen

Revision ID: 11939a664949
Revises: 
Create Date: 2025-04-21 11:47:00.195680

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '11939a664949'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_index('ix_courses_id', table_name='courses')
    # op.drop_table('courses')
    # op.drop_index('ix_responses_id', table_name='responses')
    # op.drop_table('responses')
    # op.drop_table('migrations')
    # op.drop_table('enrollments')
    op.drop_index('idx_attendance_date', table_name='attendance')
    op.drop_index('idx_attendance_student_id', table_name='attendance')
    op.create_index(op.f('ix_attendance_id'), 'attendance', ['id'], unique=False)
    op.drop_constraint('attendance_student_id_fkey', 'attendance', type_='foreignkey')
    op.create_foreign_key(None, 'attendance', 'students', ['student_id'], ['id'])
    op.alter_column('batches', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('batches', 'instructor_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint('batches_instructor_id_fkey', 'batches', type_='foreignkey')
    op.drop_constraint('batches_course_id_fkey', 'batches', type_='foreignkey')
    op.create_foreign_key(None, 'batches', 'instructors', ['instructor_id'], ['id'])
    op.drop_column('batches', 'course_id')
    op.drop_column('batches', 'end_date')
    op.drop_column('batches', 'start_date')
    op.alter_column('face_images', 'image_data',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('face_images', 'embedding',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index('idx_face_images_user_id', table_name='face_images')
    op.create_index(op.f('ix_face_images_id'), 'face_images', ['id'], unique=False)
    op.drop_constraint('instructors_user_id_key', 'instructors', type_='unique')
    op.create_index(op.f('ix_instructors_id'), 'instructors', ['id'], unique=False)
    op.drop_constraint('instructors_user_id_fkey', 'instructors', type_='foreignkey')
    op.create_foreign_key(None, 'instructors', 'users', ['user_id'], ['id'])
    op.alter_column('questions', 'question_text',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('questions', 'question_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('questions', 'options',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_index('idx_questions_test_id', table_name='questions')
    op.drop_index('idx_students_batch_id', table_name='students')
    op.drop_constraint('students_user_id_key', 'students', type_='unique')
    op.create_index(op.f('ix_students_id'), 'students', ['id'], unique=False)
    op.drop_constraint('students_batch_id_fkey', 'students', type_='foreignkey')
    op.drop_constraint('students_user_id_fkey', 'students', type_='foreignkey')
    op.create_foreign_key(None, 'students', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'students', 'batches', ['batch_id'], ['id'])
    op.add_column('tests', sa.Column('name', sa.String(), nullable=False))
    op.add_column('tests', sa.Column('scheduled_at', sa.String(), nullable=True))
    op.drop_index('idx_tests_batch_id', table_name='tests')
    op.drop_column('tests', 'duration')
    op.drop_column('tests', 'end_time')
    op.drop_column('tests', 'difficulty')
    op.drop_column('tests', 'title')
    op.drop_column('tests', 'start_time')
    op.add_column('users', sa.Column('username', sa.String(), nullable=False))
    op.add_column('users', sa.Column('full_name', sa.String(), nullable=True))
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('users', 'profile_picture',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_column('users', 'name')
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'birthday')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('birthday', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('created_at', sa.DATE(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.alter_column('users', 'profile_picture',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'full_name')
    op.drop_column('users', 'username')
    op.add_column('tests', sa.Column('start_time', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('tests', sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('tests', sa.Column('difficulty', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('tests', sa.Column('end_time', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('tests', sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_index('idx_tests_batch_id', 'tests', ['batch_id'], unique=False)
    op.drop_column('tests', 'scheduled_at')
    op.drop_column('tests', 'name')
    op.drop_constraint(None, 'students', type_='foreignkey')
    op.drop_constraint(None, 'students', type_='foreignkey')
    op.create_foreign_key('students_user_id_fkey', 'students', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('students_batch_id_fkey', 'students', 'batches', ['batch_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_students_id'), table_name='students')
    op.create_unique_constraint('students_user_id_key', 'students', ['user_id'])
    op.create_index('idx_students_batch_id', 'students', ['batch_id'], unique=False)
    op.create_index('idx_questions_test_id', 'questions', ['test_id'], unique=False)
    op.alter_column('questions', 'options',
               existing_type=sa.Text(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('questions', 'question_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('questions', 'question_text',
               existing_type=sa.TEXT(),
               nullable=True)
    op.drop_constraint(None, 'instructors', type_='foreignkey')
    op.create_foreign_key('instructors_user_id_fkey', 'instructors', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_instructors_id'), table_name='instructors')
    op.create_unique_constraint('instructors_user_id_key', 'instructors', ['user_id'])
    op.drop_index(op.f('ix_face_images_id'), table_name='face_images')
    op.create_index('idx_face_images_user_id', 'face_images', ['user_id'], unique=False)
    op.alter_column('face_images', 'embedding',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('face_images', 'image_data',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('batches', sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('batches', sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('batches', sa.Column('course_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'batches', type_='foreignkey')
    op.create_foreign_key('batches_course_id_fkey', 'batches', 'courses', ['course_id'], ['id'])
    op.create_foreign_key('batches_instructor_id_fkey', 'batches', 'users', ['instructor_id'], ['id'])
    op.alter_column('batches', 'instructor_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('batches', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_constraint(None, 'attendance', type_='foreignkey')
    op.create_foreign_key('attendance_student_id_fkey', 'attendance', 'students', ['student_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_attendance_id'), table_name='attendance')
    op.create_index('idx_attendance_student_id', 'attendance', ['student_id'], unique=False)
    op.create_index('idx_attendance_date', 'attendance', ['date'], unique=False)
    op.create_table('enrollments',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('batch_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['batch_id'], ['batches.id'], name='enrollments_batch_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='enrollments_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'batch_id', name='enrollments_pkey')
    )
    op.create_table('migrations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('version', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('applied_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='migrations_pkey'),
    sa.UniqueConstraint('version', name='migrations_version_key')
    )
    op.create_table('responses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('selected_answer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_theory', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('graded_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name='responses_question_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='responses_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='responses_pkey')
    )
    op.create_index('ix_responses_id', 'responses', ['id'], unique=False)
    op.create_table('courses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='courses_pkey')
    )
    op.create_index('ix_courses_id', 'courses', ['id'], unique=False)
    # ### end Alembic commands ###
