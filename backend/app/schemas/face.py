from pydantic import BaseModel, ConfigDict, Field
from datetime import date
from typing import Optional, List, Dict, Any


class FaceImageBase(BaseModel):
    """Base schema for face image data."""
    image_data: str = Field(
        description="Base64-encoded image data. Can include data URL prefix (e.g., 'data:image/jpeg;base64,')"
    )
    embedding: Optional[str] = Field(
        default=None,
        description="JSON string of face embedding vector. This is auto-generated by the service."
    )
    created_at: Optional[date] = Field(
        default=None,
        description="Date when the face image was created. Defaults to current date if not provided."
    )


class FaceImageCreate(FaceImageBase):
    """Schema for creating a new face image."""
    pass


class FaceImageResponse(FaceImageBase):
    """Schema for face image response."""
    id: int
    user_id: int
    
    model_config = ConfigDict(from_attributes=True)


class FaceVerification(BaseModel):
    """Schema for face verification request."""
    image_data: str = Field(
        description="Base64-encoded image data to verify"
    )
    user_id: Optional[int] = Field(
        default=None,
        description="Optional user ID to verify against. If not provided, will attempt to identify from all users."
    )


class FaceVerificationResponse(BaseModel):
    """Schema for face verification response."""
    verified: bool = Field(
        description="Whether the face was successfully verified"
    )
    user_id: Optional[int] = Field(
        default=None,
        description="ID of the matched user, if verified"
    )
    similarity: Optional[float] = Field(
        default=None,
        description="Similarity score (0-1) between the provided face and the matched face"
    )
    username: Optional[str] = Field(
        default=None,
        description="Username of the matched user, if verified"
    )
    full_name: Optional[str] = Field(
        default=None,
        description="Full name of the matched user, if verified"
    )
    message: Optional[str] = Field(
        default=None,
        description="Error or information message, if verification failed"
    )
